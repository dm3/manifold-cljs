(ns manifold-cljs.stream.core)

;; This ns got changed somewhat as the protocol functions must follow the
;; protocol that they were defined in. It's not possible to append all the
;; functions to the `deftype` like:
;;
;;  (deftype Test
;;    X Y Z
;;    (x [_])
;;    (y [_])
;;    (z [_]))
;;
;; has to be;
;;
;;  (deftype Test
;;    X (x [_])
;;    Y (y [_])
;;    Z (z [_]))


;; - removed metadata as mutable metadata not possible in Cljs
(def ^:private default-stream-impls
  `((~'downstream [this#] (manifold-cljs.stream.graph/downstream this#))
    (~'weakHandle [this# ref-queue#]
                  ;; weak handle is used as a key in a WeakMap
                  this#)
    (~'close [this#])))

(def ^:private sink-params
  '[^:mutable __isClosed
    __closedCallbacks])

;; TODO: removed `close` impl as `close` is actually defined in IEventStream (why?)
;; this makes it mandatory to merge default-stream and default-sink bodies.
;; All sink impls which relied on autogenerated `close` will have to define the following:
;;
;;   (~'close [this#] (.markClosed this#)))
(def ^:private default-sink-impls
  `[(~'isClosed [this#] ~'__isClosed)
    (~'onClosed [this# callback#]
      (if ~'__isClosed
        (callback#)
        (.push ~'__closedCallbacks callback#)))
    (~'markClosed [this#]
      (set! ~'__isClosed true)
      (manifold-cljs.utils/invoke-callbacks ~'__closedCallbacks))])

(def ^:private source-params
  '[^:mutable __isDrained
    __drainedCallbacks])

(def ^:private default-source-impls
  `[(~'isDrained [this#] ~'__isDrained)
    (~'onDrained [this# callback#]
      (if ~'__isDrained
        (callback#)
        (.push ~'__drainedCallbacks callback#)))
    (~'markDrained [this#]
      (set! ~'__isDrained true)
      (manifold-cljs.utils/invoke-callbacks ~'__drainedCallbacks))
    (~'connector [this# _#] nil)])

(defn- merged-body [& bodies]
  (let [bs (apply concat bodies)]
    (->> bs
      (map #(vector [(first %) (count (second %))] %))
      (into {})
      vals)))

(defmacro def-source [name params & body]
  (let [body (->> (partition 2 body) (map vec) (into {}))]
    `(do
       (deftype ~name
         ~(vec (distinct (concat params source-params)))
         manifold-cljs.stream.core/IEventStream
         ~@(merged-body default-stream-impls (get body :stream))
         manifold-cljs.stream.core/IEventSource
         ~@(merged-body default-source-impls (get body :source)))

       (defn ~(with-meta (symbol (str "->" name)) {:private true})
         [~@(map #(with-meta % nil) params)]
         (new ~name ~@params false (manifold-cljs.impl.queue/queue))))))

(defmacro def-sink [name params & body]
  (let [body (->> (partition 2 body) (map vec) (into {}))]
    `(do
       (deftype ~name
         ~(vec (distinct (concat params sink-params)))
         manifold-cljs.stream.core/IEventStream
         ~@(merged-body default-stream-impls (get body :stream))
         manifold-cljs.stream.core/IEventSink
         ~@(merged-body default-sink-impls (get body :sink)))

       (defn ~(with-meta (symbol (str "->" name)) {:private true})
         [~@(map #(with-meta % nil) params)]
         (new ~name ~@params false (manifold-cljs.impl.queue/queue))))))

(defmacro def-sink+source [name params & body]
  (let [body (->> (partition 2 body) (map vec) (into {}))]
    `(do
       (deftype ~name
         ~(vec (distinct (concat params source-params sink-params)))
         manifold-cljs.stream.core/IEventStream
         ~@(merged-body default-stream-impls (get body :stream))
         manifold-cljs.stream.core/IEventSink
         ~@(merged-body default-sink-impls (get body :sink))
         manifold-cljs.stream.core/IEventSource
         ~@(merged-body default-source-impls (get body :source)))

       (defn ~(with-meta (symbol (str "->" name)) {:private true})
         [~@(map #(with-meta % nil) params)]
         (new ~name ~@params false (manifold-cljs.impl.queue/queue) false (manifold-cljs.impl.queue/queue))))))
